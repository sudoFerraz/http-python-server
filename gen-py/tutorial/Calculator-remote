#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from tutorial import Calculator
from tutorial.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void ping()')
  print('  string return_key_index()')
  print('  string checkparent(string directory)')
  print('  string addarq(string name)')
  print('  string add(string arqname, string arqdir, string arqdata)')
  print('  string request(string requested)')
  print('  string get(string requested)')
  print('  string list1(string requested)')
  print('  string update(string requested, string data)')
  print('  string delete1(string requested)')
  print('  string updatex(string requested, i32 version, string data)')
  print('  string deletex(string requested, i32 Version)')
  print('  i32 calculate(i32 logid, Work w)')
  print('  void zip()')
  print('  SharedStruct getStruct(i32 key)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Calculator.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'return_key_index':
  if len(args) != 0:
    print('return_key_index requires 0 args')
    sys.exit(1)
  pp.pprint(client.return_key_index())

elif cmd == 'checkparent':
  if len(args) != 1:
    print('checkparent requires 1 args')
    sys.exit(1)
  pp.pprint(client.checkparent(args[0],))

elif cmd == 'addarq':
  if len(args) != 1:
    print('addarq requires 1 args')
    sys.exit(1)
  pp.pprint(client.addarq(args[0],))

elif cmd == 'add':
  if len(args) != 3:
    print('add requires 3 args')
    sys.exit(1)
  pp.pprint(client.add(args[0],args[1],args[2],))

elif cmd == 'request':
  if len(args) != 1:
    print('request requires 1 args')
    sys.exit(1)
  pp.pprint(client.request(args[0],))

elif cmd == 'get':
  if len(args) != 1:
    print('get requires 1 args')
    sys.exit(1)
  pp.pprint(client.get(args[0],))

elif cmd == 'list1':
  if len(args) != 1:
    print('list1 requires 1 args')
    sys.exit(1)
  pp.pprint(client.list1(args[0],))

elif cmd == 'update':
  if len(args) != 2:
    print('update requires 2 args')
    sys.exit(1)
  pp.pprint(client.update(args[0],args[1],))

elif cmd == 'delete1':
  if len(args) != 1:
    print('delete1 requires 1 args')
    sys.exit(1)
  pp.pprint(client.delete1(args[0],))

elif cmd == 'updatex':
  if len(args) != 3:
    print('updatex requires 3 args')
    sys.exit(1)
  pp.pprint(client.updatex(args[0],eval(args[1]),args[2],))

elif cmd == 'deletex':
  if len(args) != 2:
    print('deletex requires 2 args')
    sys.exit(1)
  pp.pprint(client.deletex(args[0],eval(args[1]),))

elif cmd == 'calculate':
  if len(args) != 2:
    print('calculate requires 2 args')
    sys.exit(1)
  pp.pprint(client.calculate(eval(args[0]),eval(args[1]),))

elif cmd == 'zip':
  if len(args) != 0:
    print('zip requires 0 args')
    sys.exit(1)
  pp.pprint(client.zip())

elif cmd == 'getStruct':
  if len(args) != 1:
    print('getStruct requires 1 args')
    sys.exit(1)
  pp.pprint(client.getStruct(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
